"""
Problem : D2 1983 조교의 성적 매기기(Assistant Grading)

학기가 끝나고, 학생들의 점수로 학점을 계산중이다.
학점은 상대평가로 주어지는데, 총 10개의 평점이 있다.
평점 : A+ A0 A- B+ B0 B- C+ C0 C- D0
학점은 학생들이 응시한 중간/기말고사 점수 결과 및 과제 점수가 반영된다.
각각 아래 비율로 반영된다.
총점 : 중간고사(35%) + 기말고사(45%) + 과제(20%)
10개의 평점을 총점이 높은 순서대로 부여하는데, 각각의 평점은 같은 비율로 부여할 수 있다.
예를 들어, N 명의 학생이 있을 경우 N/10 명의 학생들에게 동일한 평점을 부여할 수 있다.
입력으로 각각의 학생들의 중간, 기말, 과제 점수가 주어지고,
학점을 알고 싶은 K 번째 학생의 번호가 주어졌을 때,
K 번째 학생의 학점을 출력하는 프로그램을 작성하라.

1. N은 항상 10의 배수이며, 10 이상 100 이하의 정수이다.
2. K는 1 이상 N 이하의 정수이다.
3. K 번째 학생의 총점과 다른 학생의 총점이 동일한 경우는 입력으로 주어지지 않는다.

입력으로 첫 줄에 총 테스트 케이스의 개수 T가 온다.
다음 줄부터 각 테스트 케이스가 주어진다.
테스트 케이스의 첫 번째 줄는 학생수 N과, 학점을 알고 싶은 학생의 번호 K 가 주어진다.
테스트 케이스 두 번째 줄부터 각각의 학생이 받은 시험 및 과제 점수가 주어진다.
테스트 케이스 t에 대한 결과는 '#t'을 찍고, 한 칸 띄고, 정답을 출력한다.
(t는 테스트 케이스의 번호를 의미하며 1부터 시작한다.)
"""

def solution():
    # 테스트 케이스의 개수 T
    T = int(input())
    # 각 테스트 케이스를 저장할 리스트 test_case
    test_case = [[] for t in range(T)]
    # 평점 score
    score = ['A+', 'A0', 'A-', 'B+', 'B0', 'B-', 'C+', 'C0', 'C-', 'D0']

    # T번 반복하며, 테스트 케이스를 입력 받고 총점을 계산해 저장한다.
    for t in range(T):
        # 학생 수 N, 학점을 알고 싶은 학생의 번호 K 입력 받기.
        N, K = map(int, input().split())
        # N번 반복하며, 학생들의 점수를 입력 받아 총점을 계산해 저장한다.
        for n in range(1, N+1):
            # 중간, 기말, 과제 점수 mid, final, task
            mid, final, task = map(int, input().split())
            # 총점 = 중간고사(35%) + 기말고사(45%) + 과제(20%)
            total = (mid * 0.35) + (final * 0.45) + (task * 0.2)
            # 학생의 총점 total과 학생의 번호 n을 tuple로 묶어 저장한다.
            test_case[t].append((total, n))
        # 학생 수 N과 학점이 궁금한 학생의 번호 K를 tuple로 묶어 각 테스트 케이스 리스트 top에 저장한다.
        test_case[t].append((N, K))

    # T번 반복하며, 각 테스트 케이스에서 학점이 궁금한 학생의 학점을 출력한다.
    for t in range(1, T+1):
        # 각 test_case의 top에 저장한 학생 수 N과 학점이 궁금한 학생의 번호 K를 리스트에서 가져온다.
        N, K = test_case[t-1].pop()
        # 학생들의 점수를 기준으로 내림차순 정렬한다.
        test_case[t-1].sort(reverse=True)
        # 완전 탐색을 통해 학점이 궁금한 학생의 등수를 찾아 해당 되는 학점을 출력한다.
        for n in range(N):
            if test_case[t-1][n][1] == K:
                print(f'#{t} {score[n//(N//10)]}')
                break

solution()